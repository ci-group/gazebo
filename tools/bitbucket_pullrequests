#!/usr/bin/env ruby
#/ Usage: <progname> [options]...
#/ Get info on pull requests from gazebo's bitbucket repository
# based on http://www.alphadevx.com/a/88-Writing-a-REST-Client-in-Ruby

# to install dependencies on Ubuntu (tested with Quantal):
#sudo apt-get install ruby1.9.1-dev
#sudo gem install rest-client json
require 'rubygems'
require 'rest_client'
require 'json'
require 'optparse'

$stderr.sync = true

class BitbucketPullRequests
  # URL for bitbucket 2.0 api
  @url_prefix
  @url_suffix

  # constructor
  def initialize
    @url_domain = 'https://bitbucket.org'
    @url_prefix = @url_domain + '/api/2.0/repositories/osrf/gazebo/pullrequests'
  end

  # summary of open pull requests
  def listPullRequests()
    response = RestClient.get(@url_prefix)
    jsonHash = JSON.parse(response.body)
    output = ""
    jsonHash["values"].each { |pr| output += prettyPrintSummary(pr) }
    while jsonHash.has_key? "next"
      response = RestClient.get(@url_domain + jsonHash["next"])
      jsonHash = JSON.parse(response.body)
      jsonHash["values"].each { |pr| output += prettyPrintSummary(pr) }
    end
    return output
  end

  # summary of one pull request
  def getPullRequestSummary(id)
    response = RestClient.get(@url_prefix + "/" + id.to_s)
    jsonHash = JSON.parse(response.body)
    return prettyPrintSummary(jsonHash)
  end

  def prettyPrintSummary(pr)
    output = ""
    output += pr["id"].to_s
    output += "\t"+pr["source"]["commit"]["sha"]
    output += "\t"+pr["destination"]["commit"]["sha"]
    output += "\t"+pr["source"]["branch"]["name"]
    output += "\n"
    return output
  end

  # list of files changed by pull request
  def getPullRequestFiles(id)
    url = @url_prefix + "/" + id.to_s + "/patch"
    response = RestClient.get(url)
    output = ""
    response.lines.map(&:chomp).each do |line|
      if line.include? '+++'
        line["+++ b/"] = ""
        output += line + "\n"
      end
    end
    return output
  end
end

# default options
list    = false
summary = nil
files   = nil
help    = false
opt_parser = OptionParser.new do |o|
  o.on("-l", "--list",
       "List open pull requests with fields:\n"+" "*37+
       "[id] [source] [dest] [branch]") { |l| list = l }
  o.on("-s", "--summary [ID]", Integer,
       "Summarize a pull request with fields:\n"+" "*37+
       "[id] [source] [dest] [branch]")  { |s| summary = s }
  o.on("-f", "--files [ID]", Integer,
       "Show changed files in a pull request") { |f| files = f }
  o.on("-h", "--help", "Display this help message") do
    puts opt_parser
    exit
  end
end
opt_parser.parse!

client = BitbucketPullRequests.new
if list
  puts client.listPullRequests()
elsif !summary.nil?
  puts client.getPullRequestSummary(summary)
elsif !files.nil?
  puts client.getPullRequestFiles(files)
else
  puts opt_parser
end
